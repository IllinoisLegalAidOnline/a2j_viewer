<?php

/**
 * Implements hook_menu().
 */
function a2j_viewer_menu() {
  $items['admin/a2j-viewer'] = array(
    'title' => 'Hosted A2J 6 configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('a2j_viewer_admin_form'),
    'access arguments' => array('administer a2j viewer'),
    'file' => 'a2j_viewer.ui.inc',
    'file path' => drupal_get_path('module', 'a2j_viewer'),
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function a2j_viewer_permission() {
  $module_perms = array();

  $module_perms['administer a2j viewer'] = array(
    'title' => t('Administer A2J viewer'),
  );

  return $module_perms;
}
/**
 * Implements hook_form_alter().
 *
 * Edits the standard node form to add a custom handler for any a2j field.
 */
function a2j_viewer_form_node_form_alter(&$form, &$form_state, $form_id) {

    $form['#submit'] += array('a2j_viewer_submit_handler');

}

/**
 * Custom submit handler.
 *
 * Looks for an A2J field and then unzips and stores the A2J interview files
 * for playback within content.
 *
 * @param $form
 * @param $form_state
 */
function a2j_viewer_submit_handler($form, &$form_state) {

  $fieldname = variable_get('a2j_viewer_field_name');
  if (!empty($fieldname)) {
    $lang = field_language('node',$form_state['node'],$fieldname);
    if (isset($form_state['values'][$fieldname][$lang][0]['fid'])) {
      $fid = $form_state['values'][$fieldname][$lang][0]['fid'];
      a2j_viewer_unpack_file($fid);
    }
  }
}

/**
 * Unpacks the zip file and stores it in the right directory.
 *
 * Uses the folder name of fid[$fid] to ensure uniqueness.
 * @param $fid
 * @throws \Exception
 */

function a2j_viewer_unpack_file($fid) {
  $fileInfo = file_load($fid);
  $directory_location = variable_get('a2j_viewer_file_directory');
  $directory = 'public://' .$directory_location .'/fid' .$fid;
  $file = $fileInfo->uri;
  $archiver = archiver_get_archiver($file);
  if (!$archiver) {
    throw new Exception(t('Cannot extract %file, not a valid archive.', array ('%file' => $file)));
  }

// Remove the directory if it exists, otherwise it might contain a mixture of
// old files mixed with the new files (e.g. in cases where files were removed
// from a later release).
  $files = $archiver->listContents();
  $project = strtok($files[0], '/\\');

  $extract_location = $directory . '/' . $project;
  if (file_exists($extract_location)) {
    file_unmanaged_delete_recursive($extract_location);
  }

  $archiver->extract($directory);
}
